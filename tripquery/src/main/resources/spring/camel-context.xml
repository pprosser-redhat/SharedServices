<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd        http://camel.apache.org/schema/spring       http://camel.apache.org/schema/spring/camel-spring.xsd">
    <bean class="org.apache.qpid.jms.JmsConnectionFactory"
        id="jmsConnectionFactory" primary="true">
        <property name="remoteURI" value="amqp://${amqpEndPoint}"/>
        <property name="username" value="phil" />
        <property name="password" value="password"/>
        
    </bean>
    <camelContext id="context1" xmlns="http://camel.apache.org/schema/spring">
        <onException>
            <exception>java.lang.Exception</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE">
                <constant>500</constant>
            </setHeader>
            <setBody>
                <simple>${exception.message}</simple>
            </setBody>
        </onException>
        <restConfiguration apiContextPath="/openapi.json"
            component="servlet" contextPath="/" scheme="http"/>
        <rest enableCORS="true" id="rest1" path="/">
            <get id="openapi.json" produces="application/json" uri="openapi.json">
                <description>Gets the openapi document for this service</description>
                <route id="rest1-route1">
                    <setHeader headerName="Exchange.CONTENT_TYPE" id="setHeader-route1">
                        <constant>application/vnd.oai.openapi+json</constant>
                    </setHeader>
                    <setBody id="setBody-route1">
                        <simple>resource:classpath:openapi.json</simple>
                    </setBody>
                </route>
            </get>
        </rest>
        <rest bindingMode="json" enableCORS="true" id="rest2">
            <get bindingMode="json" id="get-alltrips" uri="/trips">
                <description>Return all trips made for the year</description>
                <to uri="direct:rest1"/>
            </get>
            <get id="get-tripsbyairline" uri="/trips/airline">
                <description>Search trips by Airline</description>
                <param dataType="string"
                    description="Provide the airline to retrive only trips made by that airline. Examples are EASYJET, FLYBE BRITISH EUROPEAN, BMI, BMI BABY, LOT-POLISH AIRLINES, KLM-ROYAL DUTCH AIRLINES"
                    name="airline" required="true" type="query"/>
                <to uri="direct:rest2"/>
            </get>
            <get id="get-tripsbymoney" uri="/trips/searchbyvalue">
                <description>Return trips greater equal to the value provided</description>
                <param dataType="number"
                    description="Search for trips greater than equal to the value provided"
                    name="money" required="true" type="query"/>
                <to uri="direct:rest3"/>
            </get>
        </rest>
        <route id="Query all trips">
            <from id="Query" uri="direct:rest1"/>
            <to id="GetTripsFromDB" uri="sql:SELECT * FROM travel?dataSource=#dataSource">
                <description>Extract all rows from the database</description>
            </to>
            <to id="_to1" uri="direct:receiveMessage?exchangePattern=InOnly"/>
        </route>
        <route id="Query by Airline">
            <from id="SearchByAirline" uri="direct:rest2"/>
            <to id="GetTripsbyAirlineFromDB" uri="sql:SELECT * FROM travel WHERE Supplier_name SOUNDS LIKE :#${headers.airline}?dataSource=#dataSource">
                <description>Extract all rows from the database</description>
            </to>
            <to id="_to2" uri="direct:receiveMessage?exchangePattern=InOnly"/>
        </route>
        <route id="Query by Monetary Value">
            <from id="SearchByMoney" uri="direct:rest3"/>
            <to id="GetTripsbyMoneyFromDB" uri="sql:SELECT * FROM travel WHERE Paid_fare >= :#${headers.money}?dataSource=#dataSource">
                <description>Extract all rows from the database</description>
            </to>
            <to id="_to3" uri="direct:receiveMessage?exchangePattern=InOnly"/>
        </route>
        <route id="Undefined Route">
            <from id="from-route2" uri="direct:501"/>
            <log id="log-route2" message="API operation not yet implemented: ${headers.CamelHttpMethod} ${headers.CamelHttpPath}"/>
            <setHeader headerName="Exchange.HTTP_RESPONSE_CODE" id="setHeader-route2">
                <constant>501</constant>
            </setHeader>
            <setBody id="setBody-route2">
                <simple>API operation not implemented: ${headers.CamelHttpMethod} ${headers.CamelHttpPath}</simple>
            </setBody>
        </route>
        <route id="sendMessagetoQ">
            <from id="_from1" uri="direct:receiveMessage"/>
            <marshal id="_marshal1">
                <json library="Jackson" prettyPrint="true"/>
            </marshal>
            <to id="toAMQP" uri="amqp:queue:receiveFlights?connectionFactory=#jmsConnectionFactory&amp;jmsMessageType=Text&amp;deliveryMode=2"/>
            <unmarshal id="_unmarshal1">
                <json library="Jackson"/>
            </unmarshal>
        </route>
    </camelContext>
</beans>
